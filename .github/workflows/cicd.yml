# DOC: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: CI/CD pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # --- Job 1 : versioning ---
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}

    steps:
      - uses: actions/checkout@v4
      - name: Compute versions
        id: versioning
        run: |
          version=$(git rev-parse --short HEAD)
          imageName=ghcr.io/${{ github.repository }}:$version
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "imageName=$imageName" >> $GITHUB_OUTPUT
          echo "the image name :'$imageName'"
          echo "## ðŸ”– New version '$version'" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“¦ Image '$imageName'" >> $GITHUB_STEP_SUMMARY

  # --- Job 2 : unit tests ---
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run unit tests
        run: |
          go test -v -cover ./...
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

  # --- Job 3 : build & push docker image ---
  build-and-push:
    runs-on: ubuntu-latest
    needs: [versioning, unit-tests]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ needs.versioning.outputs.imageName }} ./tp_app_deploiment

      - name: Push Docker image
        run: docker push ${{ needs.versioning.outputs.imageName }}

  # --- Job 4 : API tests ---
  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]

    services:
      backend:
        image: ${{ needs.versioning.outputs.imageName }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080
        options: >-
          --health-cmd="curl --fail http://localhost:8080/api/cats || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Run API tests
        run: |
          go test ./test/apitests -v
