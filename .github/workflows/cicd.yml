# DOC: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: CI/CD pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # --- Job 1 : versioning ---
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}

    steps:
      - uses: actions/checkout@v4
      - name: Compute versions
        id: versioning
        run: |
          version=$(git rev-parse --short HEAD)
          imageName=ghcr.io/${{ github.repository }}:$version
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "imageName=$imageName" >> $GITHUB_OUTPUT
          echo "## ðŸ”– New version '$version'" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“¦ Image '$imageName'" >> $GITHUB_STEP_SUMMARY

  # --- Job 2 : unit tests ---
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run unit tests with coverage
        run: |
          go test -v -cover ./...
          go test -coverprofile=coverage.out ./...
          # Le warning "no such tool covdata" peut apparaÃ®tre: inoffensif
          go tool cover -func=coverage.out || true

      - name: Upload coverage artifact (HTML)
        run: go tool cover -html=coverage.out -o coverage.html || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html
          path: coverage.html
          if-no-files-found: ignore

  # --- Job 3 : build & push docker image ---
  build-and-push:
    runs-on: ubuntu-latest
    needs: [versioning, unit-tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ needs.versioning.outputs.imageName }} ./tp_app_deploiment

      - name: Push Docker image
        run: docker push ${{ needs.versioning.outputs.imageName }}

  # --- Job 4 : API tests ---
  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]
    permissions:
      packages: read

    services:
      backend:
        image: ${{ needs.versioning.outputs.imageName }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080
        # Pas de healthcheck interne: image distroless (pas de curl)

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Wait for backend to be ready (retry loop)
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8080/api/cats >/dev/null 2>&1; then
              echo "Backend is up"; exit 0
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          echo "Backend did not become ready in time"
          exit 1

      - name: Run API tests
        run: go test ./test/apitests -v

      - name: Dump backend logs on failure
        if: failure()
        run: |
          echo "Container ID: ${{ job.services.backend.id }}"
          docker logs ${{ job.services.backend.id }} || true
