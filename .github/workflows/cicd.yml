# DOC: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: CI/CD pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # --- Job 1 : versioning ---
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}

    steps:
      - uses: actions/checkout@v4
      - name: Compute versions (lowercase image for GHCR)
        id: versioning
        shell: bash
        run: |
          version=$(git rev-parse --short HEAD)
          repo_lc="${GITHUB_REPOSITORY,,}"          # owner/repo en minuscules
          imageName="ghcr.io/${repo_lc}:${version}" # ghcr.io/<owner>/<repo>:<sha>
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "imageName=$imageName" >> $GITHUB_OUTPUT
          echo "## üîñ New version '$version'" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Image '$imageName'" >> $GITHUB_STEP_SUMMARY

  # --- Job 2 : unit tests (sans API tests) ---
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Run unit tests + coverage (best-effort)
        shell: bash
        run: |
          PKGS=$(go list ./... | grep -v '/test/apitests' || true)
          if [ -z "$PKGS" ]; then
            echo "No unit-test packages found"; exit 0
          fi
          go test -v $PKGS
          go test -coverprofile=coverage.out $PKGS || echo "::warning :: coverage collection failed, continuing"
          if [ -f coverage.out ]; then
            go tool cover -func=coverage.out || true
            go tool cover -html=coverage.out -o coverage.html || true
          fi
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html
          path: coverage.html
          if-no-files-found: ignore

  # --- Job 3 : build & push docker image ---
  build-and-push:
    runs-on: ubuntu-latest
    needs: [versioning, unit-tests]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Debug repo tree (helpful if build fails)
        run: |
          echo "== pwd ==" && pwd
          echo "== tree (maxdepth 3) ==" && find . -maxdepth 3 -type f -printf "%p\n" | sort

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Locate Dockerfile & context
        id: locate
        shell: bash
        run: |
          set -e
          DF=$(git ls-files | grep -E '(^|/)[Dd]ockerfile$' | head -n1 || true)
          if [ -z "$DF" ]; then
            echo "No Dockerfile found in repo"; exit 1
          fi
          CONTEXT=$(dirname "$DF")
          echo "dockerfile=$DF"   >> $GITHUB_OUTPUT
          echo "context=$CONTEXT" >> $GITHUB_OUTPUT
          echo "Using Dockerfile: $DF"
          echo "Using context   : $CONTEXT"

      - name: Build Docker image
        run: docker build -t ${{ needs.versioning.outputs.imageName }} -f ${{ steps.locate.outputs.dockerfile }} ${{ steps.locate.outputs.context }}

      - name: Push Docker image
        run: docker push ${{ needs.versioning.outputs.imageName }}

  # --- Job 4 : API tests ---
  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]
    permissions:
      packages: read

    services:
      backend:
        image: ${{ needs.versioning.outputs.imageName }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080

    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8080/api/cats >/dev/null 2>&1; then
              echo "Backend is up ‚úÖ"; exit 0
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          echo "Backend did not become ready in time ‚ùå"
          exit 1
      - name: Run API tests
        run: go test ./test/apitests -v
      - name: Dump backend logs on failure
        if: failure()
        run: |
          echo "Container ID: ${{ job.services.backend.id }}"
          docker logs ${{ job.services.backend.id }} || true
